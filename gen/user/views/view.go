// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// User views
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa"
)

// BbmatchingUser is the viewed result type that is projected based on a view.
type BbmatchingUser struct {
	// Type to project
	Projected *BbmatchingUserView
	// View to render
	View string
}

// BbmatchingUserCollection is the viewed result type that is projected based
// on a view.
type BbmatchingUserCollection struct {
	// Type to project
	Projected BbmatchingUserCollectionView
	// View to render
	View string
}

// BbmatchingJWT is the viewed result type that is projected based on a view.
type BbmatchingJWT struct {
	// Type to project
	Projected *BbmatchingJWTView
	// View to render
	View string
}

// BbmatchingUserView is a type that runs validations on a projected type.
type BbmatchingUserView struct {
	// firebaseのユーザーID
	UserID *string
	// チームの表示名
	UserName *string
	// チームのプライマリメールアドレス
	Email *string
	// チームのメイン電話番号
	PhoneNumber *string
	// チームの写真URL
	PhotoURL *string
	// ユーザーのプライマリメールアドレスが確認されているか。
	EmailVerified *bool
}

// BbmatchingUserCollectionView is a type that runs validations on a projected
// type.
type BbmatchingUserCollectionView []*BbmatchingUserView

// BbmatchingJWTView is a type that runs validations on a projected type.
type BbmatchingJWTView struct {
	// Json Web Token
	JWT *string
}

var (
	// BbmatchingUserMap is a map of attribute names in result type BbmatchingUser
	// indexed by view name.
	BbmatchingUserMap = map[string][]string{
		"default": []string{
			"user_id",
			"email",
			"phoneNumber",
			"photoURL",
			"UserName",
			"email_verified",
		},
		"tiny": []string{
			"UserName",
			"email",
			"photoURL",
		},
	}
	// BbmatchingUserCollectionMap is a map of attribute names in result type
	// BbmatchingUserCollection indexed by view name.
	BbmatchingUserCollectionMap = map[string][]string{
		"default": []string{
			"user_id",
			"email",
			"phoneNumber",
			"photoURL",
			"UserName",
			"email_verified",
		},
		"tiny": []string{
			"UserName",
			"email",
			"photoURL",
		},
	}
	// BbmatchingJWTMap is a map of attribute names in result type BbmatchingJWT
	// indexed by view name.
	BbmatchingJWTMap = map[string][]string{
		"default": []string{
			"JWT",
		},
	}
)

// ValidateBbmatchingUser runs the validations defined on the viewed result
// type BbmatchingUser.
func ValidateBbmatchingUser(result *BbmatchingUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBbmatchingUserView(result.Projected)
	case "tiny":
		err = ValidateBbmatchingUserViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateBbmatchingUserCollection runs the validations defined on the viewed
// result type BbmatchingUserCollection.
func ValidateBbmatchingUserCollection(result BbmatchingUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBbmatchingUserCollectionView(result.Projected)
	case "tiny":
		err = ValidateBbmatchingUserCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateBbmatchingJWT runs the validations defined on the viewed result type
// BbmatchingJWT.
func ValidateBbmatchingJWT(result *BbmatchingJWT) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBbmatchingJWTView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBbmatchingUserView runs the validations defined on
// BbmatchingUserView using the "default" view.
func ValidateBbmatchingUserView(result *BbmatchingUserView) (err error) {
	if result.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "result"))
	}
	if result.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "result"))
	}
	if result.PhotoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photoURL", "result"))
	}
	if result.EmailVerified == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_verified", "result"))
	}
	if result.UserID != nil {
		if utf8.RuneCountInString(*result.UserID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.user_id", *result.UserID, utf8.RuneCountInString(*result.UserID), 28, true))
		}
	}
	if result.UserID != nil {
		if utf8.RuneCountInString(*result.UserID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.user_id", *result.UserID, utf8.RuneCountInString(*result.UserID), 28, false))
		}
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	if result.PhoneNumber != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.phoneNumber", *result.PhoneNumber, "^\\+?[\\d]{10,}$"))
	}
	return
}

// ValidateBbmatchingUserViewTiny runs the validations defined on
// BbmatchingUserView using the "tiny" view.
func ValidateBbmatchingUserViewTiny(result *BbmatchingUserView) (err error) {
	if result.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.PhotoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photoURL", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	return
}

// ValidateBbmatchingUserCollectionView runs the validations defined on
// BbmatchingUserCollectionView using the "default" view.
func ValidateBbmatchingUserCollectionView(result BbmatchingUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateBbmatchingUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBbmatchingUserCollectionViewTiny runs the validations defined on
// BbmatchingUserCollectionView using the "tiny" view.
func ValidateBbmatchingUserCollectionViewTiny(result BbmatchingUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateBbmatchingUserViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBbmatchingJWTView runs the validations defined on BbmatchingJWTView
// using the "default" view.
func ValidateBbmatchingJWTView(result *BbmatchingJWTView) (err error) {

	return
}
