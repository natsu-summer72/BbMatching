// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// User endpoints
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package user

import (
	"context"

	goa "goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "User" service endpoints.
type Endpoints struct {
	GetCurrentUser    goa.Endpoint
	GetUser           goa.Endpoint
	ListUser          goa.Endpoint
	UpdateCurrentUser goa.Endpoint
	DeleteCurrentUser goa.Endpoint
}

// NewEndpoints wraps the methods of the "User" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetCurrentUser:    NewGetCurrentUserEndpoint(s, a.JWTAuth),
		GetUser:           NewGetUserEndpoint(s, a.JWTAuth),
		ListUser:          NewListUserEndpoint(s, a.JWTAuth),
		UpdateCurrentUser: NewUpdateCurrentUserEndpoint(s, a.JWTAuth),
		DeleteCurrentUser: NewDeleteCurrentUserEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "User" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetCurrentUser = m(e.GetCurrentUser)
	e.GetUser = m(e.GetUser)
	e.ListUser = m(e.ListUser)
	e.UpdateCurrentUser = m(e.UpdateCurrentUser)
	e.DeleteCurrentUser = m(e.DeleteCurrentUser)
}

// NewGetCurrentUserEndpoint returns an endpoint function that calls the method
// "Get current user" of service "User".
func NewGetCurrentUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SessionTokenPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetCurrentUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBbmatchingUser(res, view)
		return vres, nil
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method "Get
// User" of service "User".
func NewGetUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBbmatchingUser(res, view)
		return vres, nil
	}
}

// NewListUserEndpoint returns an endpoint function that calls the method "List
// User" of service "User".
func NewListUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SessionTokenPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.ListUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBbmatchingUserCollection(res, view)
		return vres, nil
	}
}

// NewUpdateCurrentUserEndpoint returns an endpoint function that calls the
// method "Update current user" of service "User".
func NewUpdateCurrentUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateUserPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.UpdateCurrentUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBbmatchingUser(res, view)
		return vres, nil
	}
}

// NewDeleteCurrentUserEndpoint returns an endpoint function that calls the
// method "Delete current user" of service "User".
func NewDeleteCurrentUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SessionTokenPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteCurrentUser(ctx, p)
	}
}
