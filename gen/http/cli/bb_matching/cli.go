// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// BbMatching HTTP client CLI support package
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	userc "github.com/natsu-summer72/BbMatching/gen/http/user/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user (get current user|get -user|list -user|update current user|delete current user|get jwt)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user get current user --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userGetCurrentUserFlags     = flag.NewFlagSet("get current user", flag.ExitOnError)
		userGetCurrentUserTokenFlag = userGetCurrentUserFlags.String("token", "", "")

		userGetUserFlags      = flag.NewFlagSet("get -user", flag.ExitOnError)
		userGetUserUserIDFlag = userGetUserFlags.String("userid", "REQUIRED", "firebaseのユーザーID")
		userGetUserTokenFlag  = userGetUserFlags.String("token", "", "")

		userListUserFlags     = flag.NewFlagSet("list -user", flag.ExitOnError)
		userListUserTokenFlag = userListUserFlags.String("token", "", "")

		userUpdateCurrentUserFlags     = flag.NewFlagSet("update current user", flag.ExitOnError)
		userUpdateCurrentUserBodyFlag  = userUpdateCurrentUserFlags.String("body", "REQUIRED", "")
		userUpdateCurrentUserTokenFlag = userUpdateCurrentUserFlags.String("token", "", "")

		userDeleteCurrentUserFlags     = flag.NewFlagSet("delete current user", flag.ExitOnError)
		userDeleteCurrentUserTokenFlag = userDeleteCurrentUserFlags.String("token", "", "")

		userGetJWTFlags      = flag.NewFlagSet("get jwt", flag.ExitOnError)
		userGetJWTUserIDFlag = userGetJWTFlags.String("userid", "REQUIRED", "firebaseのユーザーID")
	)
	userFlags.Usage = userUsage
	userGetCurrentUserFlags.Usage = userGetCurrentUserUsage
	userGetUserFlags.Usage = userGetUserUsage
	userListUserFlags.Usage = userListUserUsage
	userUpdateCurrentUserFlags.Usage = userUpdateCurrentUserUsage
	userDeleteCurrentUserFlags.Usage = userDeleteCurrentUserUsage
	userGetJWTFlags.Usage = userGetJWTUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user":
			switch epn {
			case "get current user":
				epf = userGetCurrentUserFlags

			case "get -user":
				epf = userGetUserFlags

			case "list -user":
				epf = userListUserFlags

			case "update current user":
				epf = userUpdateCurrentUserFlags

			case "delete current user":
				epf = userDeleteCurrentUserFlags

			case "get jwt":
				epf = userGetJWTFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get current user":
				endpoint = c.GetCurrentUser()
				data, err = userc.BuildGetCurrentUserPayload(*userGetCurrentUserTokenFlag)
			case "get -user":
				endpoint = c.GetUser()
				data, err = userc.BuildGetUserPayload(*userGetUserUserIDFlag, *userGetUserTokenFlag)
			case "list -user":
				endpoint = c.ListUser()
				data, err = userc.BuildListUserPayload(*userListUserTokenFlag)
			case "update current user":
				endpoint = c.UpdateCurrentUser()
				data, err = userc.BuildUpdateCurrentUserPayload(*userUpdateCurrentUserBodyFlag, *userUpdateCurrentUserTokenFlag)
			case "delete current user":
				endpoint = c.DeleteCurrentUser()
				data, err = userc.BuildDeleteCurrentUserPayload(*userDeleteCurrentUserTokenFlag)
			case "get jwt":
				endpoint = c.GetJWT()
				data, err = userc.BuildGetJWTPayload(*userGetJWTUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `ユーザー(チーム)に関するエンドポイント
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    get current user: 現在のエンドポイントに紐づくユーザーの情報を返します。
    get -user: 指定したIDのユーザーの情報を取得します。
    list -user: ユーザーの一覧を取得します。
    update current user: 現在のセッションに紐づくユーザーの情報を更新します。
    delete current user: 現在のセッションに紐づくユーザーを削除します。
    get jwt: 指定したユーザーIDのJWTを取得します

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userGetCurrentUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get current user -token STRING

現在のエンドポイントに紐づくユーザーの情報を返します。
    -token STRING: 

Example:
    `+os.Args[0]+` user get current user --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}

func userGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get -user -userid STRING -token STRING

指定したIDのユーザーの情報を取得します。
    -userid STRING: firebaseのユーザーID
    -token STRING: 

Example:
    `+os.Args[0]+` user get -user --userid "XRQ85mtXnINISH25zfM0m5RlC6L2" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}

func userListUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user list -user -token STRING

ユーザーの一覧を取得します。
    -token STRING: 

Example:
    `+os.Args[0]+` user list -user --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}

func userUpdateCurrentUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update current user -body JSON -token STRING

現在のセッションに紐づくユーザーの情報を更新します。
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user update current user --body '{
      "UserName": "Chunichi Dragons",
      "email": "chunichi@example.com",
      "phoneNumber": "09012345678",
      "photoURL": "http://img.com"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}

func userDeleteCurrentUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user delete current user -token STRING

現在のセッションに紐づくユーザーを削除します。
    -token STRING: 

Example:
    `+os.Args[0]+` user delete current user --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
`, os.Args[0])
}

func userGetJWTUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get jwt -userid STRING

指定したユーザーIDのJWTを取得します
    -userid STRING: firebaseのユーザーID

Example:
    `+os.Args[0]+` user get jwt --userid "XRQ85mtXnINISH25zfM0m5RlC6L2"
`, os.Args[0])
}
