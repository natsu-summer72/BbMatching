// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// User HTTP client CLI support package
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package client

import (
	"encoding/json"
	"fmt"

	user "github.com/natsu-summer72/BbMatching/gen/user"
)

// BuildGetCurrentUserPayload builds the payload for the User Get current user
// endpoint from CLI flags.
func BuildGetCurrentUserPayload(userGetCurrentUserToken string) (*user.SessionTokenPayload, error) {
	var token *string
	{
		if userGetCurrentUserToken != "" {
			token = &userGetCurrentUserToken
		}
	}
	payload := &user.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildGetUserPayload builds the payload for the User Get User endpoint from
// CLI flags.
func BuildGetUserPayload(userGetUserUserID string, userGetUserToken string) (*user.GetUserPayload, error) {
	var userID string
	{
		userID = userGetUserUserID
	}
	var token *string
	{
		if userGetUserToken != "" {
			token = &userGetUserToken
		}
	}
	payload := &user.GetUserPayload{
		UserID: userID,
		Token:  token,
	}
	return payload, nil
}

// BuildListUserPayload builds the payload for the User List User endpoint from
// CLI flags.
func BuildListUserPayload(userListUserToken string) (*user.SessionTokenPayload, error) {
	var token *string
	{
		if userListUserToken != "" {
			token = &userListUserToken
		}
	}
	payload := &user.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildUpdateCurrentUserPayload builds the payload for the User Update current
// user endpoint from CLI flags.
func BuildUpdateCurrentUserPayload(userUpdateCurrentUserBody string, userUpdateCurrentUserToken string) (*user.UpdateUserPayload, error) {
	var err error
	var body UpdateCurrentUserRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateCurrentUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"UserName\": \"Chunichi Dragons\",\n      \"email\": \"chunichi@example.com\",\n      \"phoneNumber\": \"09012345678\",\n      \"photoURL\": \"http://img.com\"\n   }'")
		}
	}
	var token *string
	{
		if userUpdateCurrentUserToken != "" {
			token = &userUpdateCurrentUserToken
		}
	}
	v := &user.UpdateUserPayload{
		Email:       body.Email,
		PhoneNumber: body.PhoneNumber,
		PhotoURL:    body.PhotoURL,
		UserName:    body.UserName,
	}
	v.Token = token
	return v, nil
}

// BuildDeleteCurrentUserPayload builds the payload for the User Delete current
// user endpoint from CLI flags.
func BuildDeleteCurrentUserPayload(userDeleteCurrentUserToken string) (*user.SessionTokenPayload, error) {
	var token *string
	{
		if userDeleteCurrentUserToken != "" {
			token = &userDeleteCurrentUserToken
		}
	}
	payload := &user.SessionTokenPayload{
		Token: token,
	}
	return payload, nil
}
