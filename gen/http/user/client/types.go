// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// User HTTP client types
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package client

import (
	"unicode/utf8"

	user "github.com/natsu-summer72/BbMatching/gen/user"
	userviews "github.com/natsu-summer72/BbMatching/gen/user/views"
	goa "goa.design/goa"
)

// UpdateCurrentUserRequestBody is the type of the "User" service "Update
// current user" endpoint HTTP request body.
type UpdateCurrentUserRequestBody struct {
	// チームのプライマリメールアドレス
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// チームのメイン電話番号
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// チームの写真URL
	PhotoURL *string `form:"photoURL,omitempty" json:"photoURL,omitempty" xml:"photoURL,omitempty"`
	// チームの表示名
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// GetCurrentUserResponseBody is the type of the "User" service "Get current
// user" endpoint HTTP response body.
type GetCurrentUserResponseBody struct {
	// firebaseのユーザーID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// チームのプライマリメールアドレス
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// チームのメイン電話番号
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// チームの写真URL
	PhotoURL *string `form:"photoURL,omitempty" json:"photoURL,omitempty" xml:"photoURL,omitempty"`
	// チームの表示名
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// GetUserResponseBody is the type of the "User" service "Get User" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// firebaseのユーザーID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// チームのプライマリメールアドレス
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// チームのメイン電話番号
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// チームの写真URL
	PhotoURL *string `form:"photoURL,omitempty" json:"photoURL,omitempty" xml:"photoURL,omitempty"`
	// チームの表示名
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// ListUserResponseBody is the type of the "User" service "List User" endpoint
// HTTP response body.
type ListUserResponseBody []*BbmatchingUserResponse

// UpdateCurrentUserResponseBody is the type of the "User" service "Update
// current user" endpoint HTTP response body.
type UpdateCurrentUserResponseBody struct {
	// firebaseのユーザーID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// チームのプライマリメールアドレス
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// チームのメイン電話番号
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// チームの写真URL
	PhotoURL *string `form:"photoURL,omitempty" json:"photoURL,omitempty" xml:"photoURL,omitempty"`
	// チームの表示名
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// GetCurrentUserUnauthorizedResponseBody is the type of the "User" service
// "Get current user" endpoint HTTP response body for the "unauthorized" error.
type GetCurrentUserUnauthorizedResponseBody string

// GetUserUnauthorizedResponseBody is the type of the "User" service "Get User"
// endpoint HTTP response body for the "unauthorized" error.
type GetUserUnauthorizedResponseBody string

// ListUserUnauthorizedResponseBody is the type of the "User" service "List
// User" endpoint HTTP response body for the "unauthorized" error.
type ListUserUnauthorizedResponseBody string

// UpdateCurrentUserUnauthorizedResponseBody is the type of the "User" service
// "Update current user" endpoint HTTP response body for the "unauthorized"
// error.
type UpdateCurrentUserUnauthorizedResponseBody string

// DeleteCurrentUserUnauthorizedResponseBody is the type of the "User" service
// "Delete current user" endpoint HTTP response body for the "unauthorized"
// error.
type DeleteCurrentUserUnauthorizedResponseBody string

// BbmatchingUserResponse is used to define fields on response body types.
type BbmatchingUserResponse struct {
	// firebaseのユーザーID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// チームのプライマリメールアドレス
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// チームのメイン電話番号
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// チームの写真URL
	PhotoURL *string `form:"photoURL,omitempty" json:"photoURL,omitempty" xml:"photoURL,omitempty"`
	// チームの表示名
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
}

// NewUpdateCurrentUserRequestBody builds the HTTP request body from the
// payload of the "Update current user" endpoint of the "User" service.
func NewUpdateCurrentUserRequestBody(p *user.UpdateUserPayload) *UpdateCurrentUserRequestBody {
	body := &UpdateCurrentUserRequestBody{
		Email:       p.Email,
		PhoneNumber: p.PhoneNumber,
		PhotoURL:    p.PhotoURL,
		UserName:    p.UserName,
	}
	return body
}

// NewGetCurrentUserBbmatchingUserOK builds a "User" service "Get current user"
// endpoint result from a HTTP "OK" response.
func NewGetCurrentUserBbmatchingUserOK(body *GetCurrentUserResponseBody) *userviews.BbmatchingUserView {
	v := &userviews.BbmatchingUserView{
		UserID:      body.UserID,
		Email:       body.Email,
		PhoneNumber: body.PhoneNumber,
		PhotoURL:    body.PhotoURL,
		UserName:    body.UserName,
	}
	return v
}

// NewGetCurrentUserUnauthorized builds a User service Get current user
// endpoint unauthorized error.
func NewGetCurrentUserUnauthorized(body GetCurrentUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewGetUserBbmatchingUserOK builds a "User" service "Get User" endpoint
// result from a HTTP "OK" response.
func NewGetUserBbmatchingUserOK(body *GetUserResponseBody) *userviews.BbmatchingUserView {
	v := &userviews.BbmatchingUserView{
		UserID:      body.UserID,
		Email:       body.Email,
		PhoneNumber: body.PhoneNumber,
		PhotoURL:    body.PhotoURL,
		UserName:    body.UserName,
	}
	return v
}

// NewGetUserUnauthorized builds a User service Get User endpoint unauthorized
// error.
func NewGetUserUnauthorized(body GetUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewListUserBbmatchingUserCollectionOK builds a "User" service "List User"
// endpoint result from a HTTP "OK" response.
func NewListUserBbmatchingUserCollectionOK(body ListUserResponseBody) userviews.BbmatchingUserCollectionView {
	v := make([]*userviews.BbmatchingUserView, len(body))
	for i, val := range body {
		v[i] = &userviews.BbmatchingUserView{
			UserID:      val.UserID,
			Email:       val.Email,
			PhoneNumber: val.PhoneNumber,
			PhotoURL:    val.PhotoURL,
			UserName:    val.UserName,
		}
	}
	return v
}

// NewListUserUnauthorized builds a User service List User endpoint
// unauthorized error.
func NewListUserUnauthorized(body ListUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewUpdateCurrentUserBbmatchingUserOK builds a "User" service "Update current
// user" endpoint result from a HTTP "OK" response.
func NewUpdateCurrentUserBbmatchingUserOK(body *UpdateCurrentUserResponseBody) *userviews.BbmatchingUserView {
	v := &userviews.BbmatchingUserView{
		UserID:      body.UserID,
		Email:       body.Email,
		PhoneNumber: body.PhoneNumber,
		PhotoURL:    body.PhotoURL,
		UserName:    body.UserName,
	}
	return v
}

// NewUpdateCurrentUserUnauthorized builds a User service Update current user
// endpoint unauthorized error.
func NewUpdateCurrentUserUnauthorized(body UpdateCurrentUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// NewDeleteCurrentUserUnauthorized builds a User service Delete current user
// endpoint unauthorized error.
func NewDeleteCurrentUserUnauthorized(body DeleteCurrentUserUnauthorizedResponseBody) user.Unauthorized {
	v := user.Unauthorized(body)
	return v
}

// ValidateBbmatchingUserResponse runs the validations defined on
// BbmatchingUserResponse
func ValidateBbmatchingUserResponse(body *BbmatchingUserResponse) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.PhotoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("photoURL", "body"))
	}
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "body"))
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, true))
		}
	}
	if body.UserID != nil {
		if utf8.RuneCountInString(*body.UserID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_id", *body.UserID, utf8.RuneCountInString(*body.UserID), 28, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.PhoneNumber != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.phoneNumber", *body.PhoneNumber, "^\\+?[\\d]{10,}$"))
	}
	return
}
