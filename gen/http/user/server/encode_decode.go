// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// User HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/natsu-summer72/BbMatching/design

package server

import (
	"context"
	"io"
	"net/http"
	"strings"
	"unicode/utf8"

	user "github.com/natsu-summer72/BbMatching/gen/user"
	userviews "github.com/natsu-summer72/BbMatching/gen/user/views"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// EncodeGetCurrentUserResponse returns an encoder for responses returned by
// the User Get current user endpoint.
func EncodeGetCurrentUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.BbmatchingUser)
		w.Header().Set("goa-view", res.View)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json; charset=utf-8")
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGetCurrentUserResponseBody(res.Projected)
		case "tiny":
			body = NewGetCurrentUserResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCurrentUserRequest returns a decoder for requests sent to the User
// Get current user endpoint.
func DecodeGetCurrentUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewGetCurrentUserSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetCurrentUserError returns an encoder for errors returned by the Get
// current user User endpoint.
func EncodeGetCurrentUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewGetCurrentUserUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetUserResponse returns an encoder for responses returned by the User
// Get User endpoint.
func EncodeGetUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.BbmatchingUser)
		w.Header().Set("goa-view", res.View)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json; charset=utf-8")
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGetUserResponseBody(res.Projected)
		case "tiny":
			body = NewGetUserResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserRequest returns a decoder for requests sent to the User Get
// User endpoint.
func DecodeGetUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID string
			token  *string
			err    error

			params = mux.Vars(r)
		)
		userID = params["user_id"]
		if utf8.RuneCountInString(userID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("userID", userID, utf8.RuneCountInString(userID), 28, true))
		}
		if utf8.RuneCountInString(userID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("userID", userID, utf8.RuneCountInString(userID), 28, false))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserPayload(userID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetUserError returns an encoder for errors returned by the Get User
// User endpoint.
func EncodeGetUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewGetUserUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListUserResponse returns an encoder for responses returned by the User
// List User endpoint.
func EncodeListUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(userviews.BbmatchingUserCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewBbmatchingUserResponseCollection(res.Projected)
		case "tiny":
			body = NewBbmatchingUserResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListUserRequest returns a decoder for requests sent to the User List
// User endpoint.
func DecodeListUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewListUserSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListUserError returns an encoder for errors returned by the List User
// User endpoint.
func EncodeListUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewListUserUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateCurrentUserResponse returns an encoder for responses returned by
// the User Update current user endpoint.
func EncodeUpdateCurrentUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.BbmatchingUser)
		w.Header().Set("goa-view", res.View)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json; charset=utf-8")
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewUpdateCurrentUserResponseBody(res.Projected)
		case "tiny":
			body = NewUpdateCurrentUserResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateCurrentUserRequest returns a decoder for requests sent to the
// User Update current user endpoint.
func DecodeUpdateCurrentUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateCurrentUserRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateCurrentUserRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewUpdateCurrentUserUpdateUserPayload(&body, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateCurrentUserError returns an encoder for errors returned by the
// Update current user User endpoint.
func EncodeUpdateCurrentUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewUpdateCurrentUserUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteCurrentUserResponse returns an encoder for responses returned by
// the User Delete current user endpoint.
func EncodeDeleteCurrentUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteCurrentUserRequest returns a decoder for requests sent to the
// User Delete current user endpoint.
func DecodeDeleteCurrentUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token *string
		)
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		payload := NewDeleteCurrentUserSessionTokenPayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteCurrentUserError returns an encoder for errors returned by the
// Delete current user User endpoint.
func EncodeDeleteCurrentUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewDeleteCurrentUserUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetJWTResponse returns an encoder for responses returned by the User
// Get JWT endpoint.
func EncodeGetJWTResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userviews.BbmatchingJWT)
		enc := encoder(ctx, w)
		body := NewGetJWTResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetJWTRequest returns a decoder for requests sent to the User Get JWT
// endpoint.
func DecodeGetJWTRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID string
			err    error

			params = mux.Vars(r)
		)
		userID = params["user_id"]
		if utf8.RuneCountInString(userID) < 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("userID", userID, utf8.RuneCountInString(userID), 28, true))
		}
		if utf8.RuneCountInString(userID) > 28 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("userID", userID, utf8.RuneCountInString(userID), 28, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetJWTPayload(userID)

		return payload, nil
	}
}

// EncodeGetJWTError returns an encoder for errors returned by the Get JWT User
// endpoint.
func EncodeGetJWTError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(user.Unauthorized)
			enc := encoder(ctx, w)
			body := NewGetJWTUnauthorizedResponseBody(res)
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
